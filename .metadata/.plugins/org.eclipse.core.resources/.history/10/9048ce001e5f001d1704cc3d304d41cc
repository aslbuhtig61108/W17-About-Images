package com.promineotech.jeep.service;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.util.Collections;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;
import javax.imageio.ImageIO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.remoting.RemoteTimeoutException;
// import org.springframework.stereotype.Service;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import com.promineotech.jeep.dao.JeepSalesDao;
import com.promineotech.jeep.entity.Image;
import com.promineotech.jeep.entity.ImageMIMEType;
import com.promineotech.jeep.entity.Jeep;
import com.promineotech.jeep.entity.JeepModel;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j

// W15 - Coding Assignment - ITEM# 1c and 1d [LINE 26]
public class DefaultJeepSalesService implements JeepSalesService {

  @Autowired
  private JeepSalesDao jeepSalesDao;

  @Transactional
  @Override
  public String uploadImage(MultipartFile file, Long modelPK) {
    String imageId = UUID.randomUUID().toString();
    
    try(InputStream inputStream = image.getInputStream()) {
      BufferedImage bufferedImage = ImageIO.read(inputStream);
      
      // @formatter: off
      Image image = Image.builder()
          .modelFK(modelPK)
          .imageId(imageId)
          .width(bufferedImage.getWidth())
          .height(bufferedImage.getHeight())
          .mimeType(ImageMIMEType.IMAGE_JPEG)
          .name(file.getOriginalFilename())
          .data(toByteArray(bufferedImage, "jpeg"))
          .build();
      // @formatter: on
      
    } catch (IOException e) {
        throw new UncheckedIOException(e);
    }
    return null;
  }

  /**
   * 
   * @param bufferedImage
   * @param renderType
   * @return
   */
  private byte[] toByteArray(BufferedImage bufferedImage, String renderType) {
    try {
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      
      if (!ImageIO.write(null, renderType, baos)) {
        throw new RemoteTimeoutException("Could not write to image buffer");
      }
      
      return baos.toByteArray();
    } catch (IOException e) {
        throw new UncheckedIOException(e); 
    }
    
  }

  @Transactional(readOnly = true)
  @Override
  public List<Jeep> fetchJeeps(JeepModel model, String trim) {
    // List<Jeep> jeeps = new ArrayList<>(); // W15 - Coding Assignment - ITEM#2 not relevant to the
    // assignment
    log.info("The fetchJeeps() method was called with model={} and trim={}", model, trim);

    List<Jeep> jeeps = jeepSalesDao.fetchJeeps(model, trim); // W15 - ITEM#2 states 'return the
                                                             // value in the 'jeeps' variable (we
                                                             // will add to this later).

    // this exception picks up an empty list with an exception handler
    if (jeeps.isEmpty()) {
      String msg = String.format("No jeeps found with model=%s and trim=%s", model, trim);

      throw new NoSuchElementException(msg);
    }
    Collections.sort(jeeps);
    return jeeps;
  }

}
